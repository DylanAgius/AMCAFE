// define member functions of VoxelCA

#include "Grid.h"
#include "BasePlate.h"
#include "VoxelsCA.h"
#include "Partition.h"
#include "iostream"
#include "fstream"
#include <math.h>
#include <algorithm>
#include <random>
#include <ctime>
#include "mpi.h"
#include "SampleOrientation.h"

// constructor
VoxelsCA::VoxelsCA(Grid &g,TempField &tf, Partition &part)
{ 
  _xyz = &g;
  _temp = &tf;
  _part = &part;
  int Ntot = (_part->ncellLoc)+(_part->nGhost);
  gID.resize(Ntot,0);
  vState.resize(Ntot,0);
  extentsInitialValue = 0.0; // (xyz->dx)/2.0
  extentsInitialValue2 = *std::min_element(_xyz->dX.begin(),_xyz->dX.end()); // (xyz->dx)/2.0
  extents.assign(Ntot,extentsInitialValue);
  seed0= 2132512;
  seed1=2912351;
} // end constructor

void VoxelsCA::InitializeVoxels(BasePlate &bp){
  // generate baseplate and add to voxel data
  bp.GenerateVoxel();
  int Ntot = (_part->ncellLoc)+(_part->nGhost);
  nGrain = bp.Ngrain;
  NzhBP = bp.Nzh;
  gNucleus.resize(bp.Ngrain,0);
  for (int j = 0;j < bp.Ngrain;++j){ gNucleus[j] = bp.gNucleus[j];}

  for (int j=0; j<bp.jVals.size() ;++j){
    gID[j] = bp.X[j];
    if (  _part->icellidLoc[j] < (bp.Nzh - 1)*_xyz->nX[0]*_xyz->nX[1]){
      vState[j] = 3; // base plate to be solid except top layer
    } else {
      vState[j] = 2; // baseplate top layer to be mushy
    }
  } // for j
  cTheta.assign(bp.Ngrain*4,0);
  for (int j1=0;j1<bp.Ngrain*4;++j1){cTheta[j1] = bp.cTheta[j1];} // end for j1
  // share vState information among processors and fill ghost cell information
  _part->PassInformation(vState);
  _part->PassInformation(gID);
} // end InitializeVoxles

void VoxelsCA::InitializeTest1()
{
  int Ntot = _part->ncellLoc + _part->nGhost,jst,j2;
  nGrain = 1;
  gID.assign(Ntot,0);
  jst = _xyz->nX[0]*_xyz->nX[1]*floor(_xyz->nX[2]/2.0)+_xyz->nX[0]*floor(_xyz->nX[1]/2.0)+floor(_xyz->nX[0]/2.0);
  gNucleus.resize(1,jst);
  cTheta = {M_PI*60.0/180.0,1.0/pow(3.0,.5),1.0/pow(3.0,.5),1.0/pow(3.0,.5)};
  for (int j =0; j <Ntot; ++j){ vState[j] = 1;}
  j2 = std::distance(_part->icellidLoc.begin(),
		     std::find(_part->icellidLoc.begin(),_part->icellidLoc.end(),jst));
  if (j2 != _part->icellidLoc.size()){
    vState[j2] = 2;
    gID[j2] = 1;
  }
}


void VoxelsCA::UpdateVoxels()
{
  // set liquid if temperature > TL
  SetLiquid();
  // zero voxels above laser (no material there)
  ZeroVoxels();
  // SetLiquids, ZeroVoxels: no need to pass information for  b/c only local evaluation)
  // solid (vState=3) to mushy (vState=2) if one neighbor liquid (vState=1)
  ConvertSolid(1);
  _part->PassInformation(vState);
  // update extents of growing grains 
  ComputeExtents();
  // (ComputeExtents: no information pass: only local evaluation)
  // determine if liquid voxel is captured by neighbor
  ComputeVoxelCapture();
  _part->PassInformation(vState);
  _part->PassInformation(gID);
  _part->PassInformation(extents);
  // mushy (vState=2) to solid (vState=3) if all neighbors 2 
  ConvertSolid(0);
  _part->PassInformation(vState);
  _part->PassInformation(extents);
  // check if can skip ahead time to next temperature increment

};

void VoxelsCA::ConvertSolid(const int &iswitch)
{
  // if iswitch =0 then converts mushy to solid
  // else converts solid to mushy
  int Ntot = (_part->ncellLoc),cc,j2,iplay=_xyz->nX[0]*_xyz->nX[1]*_temp->ilaserLoc,
    iplay2=_xyz->nX[0]*_xyz->nX[1]*NzhBP;
  std::vector<int> vneigh,neigh,i1(_part->ncellLoc,0);
  if (iswitch==0){
    // this checks if all neighbors are >=2 and converts to 3 if currently 2
    cc=0;
    for (int j=0; j < Ntot;++j){
      //if (_part->icellidLoc[j] >= iplay){continue;}
      if (vState[j]==2){
	_xyz->ComputeNeighborhood(_part->icellidLoc[j],_xyz->neighOrder,neigh);
	vneigh.assign(neigh.size(),0);
	for (int j1=0;j1<neigh.size();++j1){
	  j2 = std::distance(_part->icellidLoc.begin(),
			     std::find(_part->icellidLoc.begin(),_part->icellidLoc.end(),neigh[j1]));
	  vneigh[j1] = vState[j2];
	}
	if (std::all_of(vneigh.begin(),vneigh.end(),[](int n){return n>=2;})) {
	  i1[cc] = j;
	  cc +=1;
	} // if
      } // if (vState[j]==2)
    } // for j
    for (int j=0;j<cc;++j){
      vState[i1[j]] = 3;
      extents[i1[j]] = extentsInitialValue;
    } // for j
  } else {
    // this checks if any neighbors are 1 and converts to 2 if currently 3
    cc=0;
    for (int j=0; j < Ntot;++j){
      //if (_part->icellidLoc[j] >= iplay){continue;}
      if (_part->icellidLoc[j] < iplay2){continue;}
      if (vState[j]==3){
	_xyz->ComputeNeighborhood(_part->icellidLoc[j],_xyz->neighOrder,neigh);
	vneigh.assign(neigh.size(),0);
	for (int j1=0;j1<neigh.size();++j1){
	  j2 = std::distance(_part->icellidLoc.begin(),
			     std::find(_part->icellidLoc.begin(),_part->icellidLoc.end(),neigh[j1]));
	  vneigh[j1] = vState[j2];
	}
	if (std::any_of(vneigh.begin(),vneigh.end(),[](int n){return n==1;})) {
	  i1[cc] = j;
	  cc += 1;
	} // end if
      } // if (vState[j]==3)
    } // for j
    for (int j=0;j<cc;++j){
      vState[i1[j]] = 2;
    } // for j
  } // if (iswitch==0)
}; // ConvertSolid

void VoxelsCA::ComputeVoxelCapture(){
  //determines if liquid is captured by growing mushy neighbor
  int j,j1,j2,j3,j1n,j2n,j3n,jck,Ntot,i1cc,jneigh,iplay,Ntot2;
  double x0,y0,z0,xj,yj,zj,omega,d;
  std::vector<int> neigh,jcklist,ichk;
  std::vector<double> ax(3),avec(3),planeEval(8);
  std::random_device rd;
  std::mt19937 gen(rd());
  std::vector<std::vector<double>> nA(8,std::vector<double>(3)),
    pA(8,std::vector<double>(3)),rRot(3,std::vector<double>(3));


  nA[0] = {1.0/pow(3.0,.5),1.0/pow(3.0,.5),1.0/pow(3.0,.5)};
  nA[1] = {-1.0/pow(3.0,.5),1.0/pow(3.0,.5),1.0/pow(3.0,.5)};
  nA[2] = {1.0/pow(3.0,.5),-1.0/pow(3.0,.5),1.0/pow(3.0,.5)};
  nA[3] = {-1.0/pow(3.0,.5),-1.0/pow(3.0,.5),1.0/pow(3.0,.5)};
  nA[4] = {1.0/pow(3.0,.5),1.0/pow(3.0,.5),-1.0/pow(3.0,.5)};
  nA[5] = {-1.0/pow(3.0,.5),1.0/pow(3.0,.5),-1.0/pow(3.0,.5)};
  nA[6] = {1.0/pow(3.0,.5),-1.0/pow(3.0,.5),-1.0/pow(3.0,.5)};
  nA[7] = {-1.0/pow(3.0,.5),-1.0/pow(3.0,.5),-1.0/pow(3.0,.5)};
  pA[0] = {1.0,0.0,0.0};
  pA[1] = {-1.0,0.0,0.0};
  pA[2] = {0.0,-1.0,0.0};
  pA[3] = {0.0,-1.0,0.0};
  pA[4] = {0.0,0.0,-1.0};
  pA[5] = {0.0,0.0,-1.0};
  pA[6] = {1.0,0.0,0.0};
  pA[7] = {0.0,-1.0,0.0};

  Ntot = _part->ncellLoc;
  Ntot2 = _part->ncellLoc + _part->nGhost;
  ichk.assign(Ntot2,0);
  iplay =_xyz->nX[0]*_xyz->nX[1]*_temp->ilaserLoc;
  for (int j=0;j<Ntot;++j){
    //if (_part->icellidLoc[j] >= iplay){continue;}
    if (vState[j]==1){
      _xyz->ComputeNeighborhood(_part->icellidLoc[j],_xyz->neighOrder,neigh);
      j3 = floor(_part->icellidLoc[j]/(_xyz->nX[0]*_xyz->nX[1]));
      j2 = floor( (_part->icellidLoc[j]- _xyz->nX[0]*_xyz->nX[1]*j3)/_xyz->nX[0]);
      j1 = _part->icellidLoc[j] - _xyz->nX[0]*_xyz->nX[1]*j3 - _xyz->nX[0]*j2;
      x0 = (double(j1)+.5)*(_xyz->dX[0]);
      y0 = (double(j2)+.5)*(_xyz->dX[1]);
      z0 = (double(j3)+.5)*(_xyz->dX[2]);
      jcklist.assign(neigh.size(),0);
      i1cc=0;
      for (int jj=0;jj<neigh.size();++jj){
	jneigh = std::distance(_part->icellidLoc.begin(),
			   std::find(_part->icellidLoc.begin(),_part->icellidLoc.end(),neigh[jj]));
	if (vState[jneigh]==2){
	  j3n = floor(gNucleus[gID[jneigh]-1]/(_xyz->nX[0]*_xyz->nX[1]));
	  j2n = floor( (gNucleus[gID[jneigh]-1]-_xyz->nX[0]*_xyz->nX[1]*j3n)  /_xyz->nX[0]);
	  j1n = gNucleus[gID[jneigh]-1] - _xyz->nX[0]*_xyz->nX[1]*j3n - _xyz->nX[0]*j2n;
	  xj = (double(j1n)+.5)*(_xyz->dX[0]);
	  yj = (double(j2n)+.5)*(_xyz->dX[1]);
	  zj = (double(j3n)+.5)*(_xyz->dX[2]);
	  omega = cTheta[4*(gID[jneigh]-1)];
	  ax = {cTheta[4*(gID[jneigh]-1)+1],cTheta[4*(gID[jneigh]-1)+2], cTheta[4*(gID[jneigh]-1)+3]};
	  rRot[0][0] = cos(omega) + pow(ax[0],2.0)*(1-cos(omega));
	  rRot[0][1] = ax[0]*ax[1]*(1-cos(omega)) - ax[2]*sin(omega);
	  rRot[0][2] = ax[0]*ax[2]*(1-cos(omega)) + ax[1]*sin(omega);
	  rRot[1][0] = ax[0]*ax[1]*(1-cos(omega)) + ax[2]*sin(omega);
	  rRot[1][1] = cos(omega) + pow(ax[1],2.0)*(1-cos(omega));
	  rRot[1][2] = ax[1]*ax[2]*(1-cos(omega)) - ax[0]*sin(omega);
	  rRot[2][0] = ax[2]*ax[0]*(1-cos(omega)) - ax[1]*sin(omega);
	  rRot[2][1] = ax[2]*ax[1]*(1-cos(omega)) + ax[0]*sin(omega);
	  rRot[2][2] = cos(omega) + pow(ax[2],2.0)*(1-cos(omega));
	  for (int j2=0;j2<8;++j2){
	    avec[0] = rRot[0][0]*nA[j2][0]+rRot[0][1]*nA[j2][1]+rRot[0][2]*nA[j2][2];
	    avec[1] = rRot[1][0]*nA[j2][0]+rRot[1][1]*nA[j2][1]+rRot[1][2]*nA[j2][2];
	    avec[2] = rRot[2][0]*nA[j2][0]+rRot[2][1]*nA[j2][1]+rRot[2][2]*nA[j2][2];
	    d = - (xj*avec[0] + yj*avec[1] + zj*avec[2] + 
		   (nA[j2][0]*pA[j2][0]+nA[j2][1]*pA[j2][1]+nA[j2][2]*pA[j2][2])*extents[jneigh]);
	    planeEval[j2] = avec[0]*x0+avec[1]*y0+avec[2]*z0 + d;
	  } // for (int j2....
	  if (std::all_of(planeEval.begin(),planeEval.end(),[](double x){return x<0;})){
	    if (ichk[jneigh]==0){
	      jcklist[i1cc] = jj;
	      i1cc +=1;
	    }
	  }       
	} // if (vState[jneigh]==2)
      } // end for jj
      if (i1cc > 0){
	std::uniform_int_distribution<> ir(0,i1cc-1);
	std::default_random_engine gen1(seed0+10*_part->icellidLoc[j]+15*_xyz->tInd);
     	vState[j]=2;
	jck = ir(gen);
	ichk[j] = 1;
	jneigh = std::distance(_part->icellidLoc.begin(),
	       std::find(_part->icellidLoc.begin(),_part->icellidLoc.end(),neigh[jcklist[jck]]));
	gID[j] = gID[jneigh];
	extents[j] = extents[jneigh];
      } // if (i1cc>0
    } // if vState[j]==1
  } // for j
}; // end ComputeVoxelCapture

void VoxelsCA::SetLiquid(){
  // makes cell liquid if temperature exceeds liquidus
  int Ntot = _part->ncellLoc + _part->nGhost; 
  int n1 = NzhBP*_xyz->nX[0]*_xyz->nX[1];
  int j;
  for (int j=0;j<Ntot;++j){
    if (_part->icellidLoc[j] <n1){continue;}
    if (_temp->TempCurr[j] >= _xyz->tL ) { 
      vState[j] = 1;
      gID[j] = 0; // flag that it loses its grain
    } 
  } // end for j
};

void VoxelsCA::ZeroVoxels(){
  // sets voxels to zero where laser hasn't reached yet
  int j,j1,j2,j3;
  int Ntot = _part->ncellLoc + _part->nGhost,n1; 
  double x,y;
  if (_temp->patternID==0){
    x = _temp->bmV*fmod(_xyz->time,_temp->bmPeriod[0]);;
    y = fmod(floor(_xyz->time/_temp->bmPeriod[0]),_temp->bmPeriod[1])*_temp->bmS;
    j1 = floor(x/_xyz->dX[0]);
    j2 = floor(y/_xyz->dX[1]);
    j3 = _temp->ilaserLoc;
    n1 = _xyz->nX[0]*_xyz->nX[1]*j3 + _xyz->nX[0]*j2 + j1;
    for (int j=0;j<Ntot;++j){
      if (_part->icellidLoc[j] <n1){continue;}
      vState[j] = 0;
      gID[j] = 0;
    } // for j
  } // if (_temp->patternID==0
};

void VoxelsCA::CheckTimeSkip(){
  // checks if any voxel with vState=1 has temperature < melting; if none, then 
  // skip ahead to next time increment for temperature
  int Ntot = _part->ncellLoc + _part->nGhost,icheck=0,icheckT;
  for (int j=0;j<Ntot;++j){
    if (vState[j]==1 && _temp->TempCurr[j]<_xyz->tL){icheck=1;}
  }
  MPI_Allreduce(&icheck,&icheckT,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);
  if (icheckT==0){_xyz->SkipTime(_temp->DelT);}

}; // end CheckTimeSkip

void VoxelsCA::ComputeExtents(){
  // compute velocity and update extent of [1,0] direction if vState=2
  int j,Ntot;
  double etaScale;
  Ntot = _part->ncellLoc + _part->nGhost;
  std::vector<double> velocity(Ntot,0);
  vmax = 0.0;
  for (int j=0;j<Ntot;++j){
    if (vState[j] == 2){
      if (_temp->TempCurr[j]>=_xyz->tL){
	velocity[j] = 0.0;
	extents[j] = extentsInitialValue;
      } else{
	velocity[j] = (_xyz->dL)/
	  (5.51*pow(M_PI,2.0)*pow((- _xyz->mL)*(1-_xyz->kP),1.5)*
	   (_xyz->Gamma))*( pow((_xyz->tL - _temp->TempCurr[j]),2.5)/
			  pow(_xyz->c0,1.5));
      }	
      vmax = std::max(vmax,velocity[j]);
    } // if (vState[j]==2)
  } // for j  
  double vmax2 = vmax;
  MPI_Allreduce(&vmax2,&vmax,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);
  _xyz->UpdateTimeTest1(vmax);
  for (int j=0;j<Ntot;++j){
    if (vState[j] == 2){
      extents[j] +=velocity[j]*(_xyz->dt);
    }
  }
};

void VoxelsCA::ComputeNucleation1(){
  int Ntot = _part->ncellLoc, nmushy,itmp,ngtmp=0,ngnew,cc,seed,cc1;
  std::vector<double> nrate(Ntot,0),gidtmp,cthtmp,tmpall1,tmp1;
  std::vector<std::vector<double>> aa;
  std::vector<int> ngvec(_part->nprocs,0),ind,tmp2,tmpall2,gnuctmp;
  std::vector<unsigned int> sdloc;
  std::srand(std::time(nullptr));
  std::default_random_engine g(std::rand());
  std::uniform_real_distribution<double> xrand(0,1);

  for (int j=0;j<Ntot;++j){
    nrate[j] = -2*_xyz->muN *(_xyz->tL - _temp->TempCurr[j])*_temp->DDtTemp[j];
  } // for j
  itmp = 0;
  for (int j=0;j<Ntot;++j){
    if (vState[j] == 2){itmp +=1;}
  }
  MPI_Allreduce(&itmp,&nmushy,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);
  for (int j=0;j<Ntot;++j){
    if (vState[j] == 2){
      std::default_random_engine g1(seed1+11*_part->icellidLoc[j] + 21*_xyz->tInd);
      if (xrand(g1) < nrate[j]/nmushy*_xyz->dt){
	ind.push_back(j);
	ngtmp += 1;
	gnuctmp.push_back(_part->icellidLoc[j]);
	//	sdloc.push_back(int(g1()/1000 + 1234));
	sdloc.push_back(unsigned( double(g1())/double(g1.max())*pow(2.0,32.0)));
      } // if (xrand(g) < ...
    } // if (vState[j]==2
  } // for (int j ...
  aa.assign(ngtmp,std::vector<double>(4));
  SampleOrientation sa;
  sa.GenerateSamples(ngtmp,sdloc,aa);
  for (int j1=0;j1<ngtmp;++j1){
    cthtmp.push_back(aa[j1][0]);
    cthtmp.push_back(aa[j1][1]);
    cthtmp.push_back(aa[j1][2]);
    cthtmp.push_back(aa[j1][3]);
  } // end for j1   

  MPI_Allgather(&ngtmp,1,MPI_INT,&ngvec[0],1,MPI_INT,MPI_COMM_WORLD);
  ngnew = std::accumulate(ngvec.begin(),ngvec.end(),0);
  if (ngnew > 0){
    tmpall1.assign(4*ngnew,0);
    tmpall2.assign(ngnew,0);
    cc=0;
    cc1=0;
    for (int j=0;j<_part->nprocs;++j){
      tmp1.assign(4*ngvec[j]+1,0);
      tmp2.assign(ngvec[j]+1,0);
      if (_part->myid==j){
	for (int j1=0;j1<ind.size();++j1){
	  tmp1[4*j1+1] = cthtmp[4*j1];
	  tmp1[4*j1+1+1] = cthtmp[4*j1+1];
	  tmp1[4*j1+2+1] = cthtmp[4*j1+2];
	  tmp1[4*j1+3+1] = cthtmp[4*j1+3];
	  tmp2[j1+1] = gnuctmp[j1];
	}
      }
      MPI_Bcast(&tmp1[0],4*ngvec[j]+1,MPI_DOUBLE,j,MPI_COMM_WORLD);
      MPI_Bcast(&tmp2[0],ngvec[j]+1,MPI_INT,j,MPI_COMM_WORLD);
      for (int j1=0;j1<ngvec[j];++j1){
	tmpall1[cc1+4*j1] = tmp1[4*j1+1];
	tmpall1[cc1+4*j1+1] = tmp1[4*j1+1+1];
	tmpall1[cc1+4*j1+2] = tmp1[4*j1+2+1];
	tmpall1[cc1+4*j1+3] = tmp1[4*j1+3+1];
	tmpall2[cc+j1] = tmp2[j1+1];
      } // for (int j1...
      cc +=ngvec[j];
      cc1 +=4*ngvec[j];
    } // for (int j ...
    for (int j=0; j<4*ngnew;++j){cTheta.push_back(tmpall1[j]);}
    for (int j=0; j<ngnew;++j){gNucleus.push_back(tmpall2[j]);}
    cc = 1;
    for (int j=0;j<_part->nprocs;++j){    
      if (_part->myid ==j){
	for (int j1=0;j1<ind.size();++j1){
	  gID[ind[j1]] = nGrain + cc + j1;
	  extents[ind[j1]] = extentsInitialValue2;
	} // for (int j1 ...
      } // if (_part->myid ...
      cc +=ngvec[j];
    } // for (int j ...
    nGrain +=ngnew;
    _part->PassInformation(gID);
    _part->PassInformation(extents);

  } // if (ngnew > 0)  
};

void VoxelsCA::WriteToVTU1(const std::string &filename)
{
  // writes gID, vState, cTheta per voxel
  std::string vtkFilename = filename + ".vtu";
  std::ofstream fp;
  int Offset=0, nC=_part->ncellLoc, nP=_part->npointLoc,j1,j2,j3,cell_offsets;
  unsigned char cell_type;
  std::vector< float> cThetaOut(4*nC,0),TempOut(nC,0);
  for (int j=0;j<nC;++j){
    TempOut[j] = _temp->TempCurr[j];
    if (gID[j]<1){
      cThetaOut[4*j] = 0;
      cThetaOut[4*j+1] = 0;
      cThetaOut[4*j+2] = 0;
      cThetaOut[4*j+3] = 0;
    } else {
      cThetaOut[4*j] = cTheta[4*(gID[j]-1)];
      cThetaOut[4*j+1] = cTheta[4*(gID[j]-1)+1];
      cThetaOut[4*j+2] = cTheta[4*(gID[j]-1)+2];
      cThetaOut[4*j+3] = cTheta[4*(gID[j]-1)+3];
    }
  }
  if (_xyz->nnodePerCell==4){cell_type=9;}
  if (_xyz->nnodePerCell==8){cell_type=12;}
  if (_part->myid == 0) {
    fp.open(vtkFilename.c_str());
    if (!fp) throw std::runtime_error("Cannot create VTU file: " + filename);
    fp << "<?xml version='1.0'?>" << std::endl;
    fp << "<VTKFile type='UnstructuredGrid' version='0.1' byte_order='LittleEndian'>" << std::endl;
    fp << "  <UnstructuredGrid>" << std::endl;
    fp << "    <FieldData>" << std::endl;
    fp << "      <DataArray type='Int32' Name='time_step' NumberOfTuples='1' format='ascii'>" << std::endl;
    fp << "        " << _xyz->tInd << std::endl;
    fp << "      </DataArray>" << std::endl;
    fp << "    </FieldData>" << std::endl;
    fp.close();
  } // if (myid==0)
  for (int rank=0;rank<_part->nprocs;++rank){
    int OffsetP=Offset;
    MPI_Allreduce(&OffsetP,&Offset,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);
    if (_part->myid != rank) { Offset=0; continue; }
    fp.open(vtkFilename.c_str(), std::fstream::app);
    fp << "    <Piece NumberOfPoints='" << nP << "' NumberOfCells='" << nC << "'>" << std::endl;
    fp << "      <Points>" << std::endl;
    fp << "        <DataArray type='Float32' Name='Position' NumberOfComponents='3' format='appended' offset='" << Offset << "'/>" << std::endl;
    fp << "      </Points>" << std::endl;
    Offset += 3 * nP * sizeof(float) + sizeof(int);
    fp << "      <Cells>" << std::endl;
    fp << "        <DataArray type='Int32' Name='connectivity' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += _part->iconnectivityLoc.size() * sizeof (int) + sizeof(int);
    fp << "        <DataArray type='Int32' Name='offsets' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += nC * sizeof (int) + sizeof(int);
    fp << "        <DataArray type='UInt8' Name='types' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += nC * sizeof (unsigned char) + sizeof(int);
    fp << "      </Cells>" << std::endl;
    fp << "      <PointData>" << std::endl;
    fp << "      </PointData>" << std::endl;
    fp << "      <CellData>" << std::endl;
    fp << "        <DataArray type='Int32' Name='vState' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += nC * sizeof (int) + sizeof (int);
    fp << "        <DataArray type='Int32' Name='gID' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += nC * sizeof (int) + sizeof (int);
    fp << "        <DataArray type='Float32' Name='cTheta' NumberOfComponents='4' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += 4*nC * sizeof (float) + sizeof (int);
    fp << "        <DataArray type='Float32' Name='Temperature' NumberOfComponents='1' format='appended' offset='" << Offset << "'/>" << std::endl;
    Offset += nC * sizeof (float) + sizeof (int);
    fp << "      </CellData>" << std::endl;
    fp << "    </Piece>" << std::endl;
    fp.close();
  } // for (int rank ...
  MPI_Barrier(MPI_COMM_WORLD);
  if (_part->myid == 0) {
    fp.open(vtkFilename.c_str(), std::fstream::app);
    fp << "  </UnstructuredGrid>" << std::endl;
    fp << "  <AppendedData encoding='raw'>" << std::endl;
    fp << "_";
    fp.close();
  }
  for (int rank = 0; rank < _part->nprocs; rank++) {
    MPI_Barrier(MPI_COMM_WORLD);
    if (_part->myid != rank) continue;
    fp.open(vtkFilename.c_str(), std::fstream::app);
    int Scalar = nP * sizeof (float), Vector = 3 * Scalar, Cells = nC * sizeof(int), 
      CellsTH=4*nC*sizeof(float), CellsTemp=nC*sizeof(float);
    int CellChars = nC * sizeof(unsigned char), Conn = _part->iconnectivityLoc.size() * sizeof(int);
    fp.write(reinterpret_cast<const char *>(&Vector), 4);
    for (int j=0;j<nP;j++) {
      j3 = floor(_part->ipointidLoc[j]/( (_xyz->nX[0]+1)*(_xyz->nX[1]+1)));
      j2 = floor( (_part->ipointidLoc[j] - (_xyz->nX[0]+1)*(_xyz->nX[1]+1)*j3)/(_xyz->nX[0]+1));
      j1 = _part->ipointidLoc[j] - (_xyz->nX[0]+1)*(_xyz->nX[1]+1)*j3 - (_xyz->nX[0]+1)*j2;
      float x = j1*_xyz->dX[0], y = j2*_xyz->dX[1], z = j3*_xyz->dX[2];
      fp.write(reinterpret_cast<const char *>(&x), sizeof(float));
      fp.write(reinterpret_cast<const char *>(&y), sizeof(float));
      fp.write(reinterpret_cast<const char *>(&z), sizeof(float));
    }
    fp.write(reinterpret_cast<const char *>(&Conn), 4);
    for (int i=0;i<nC;++i) {
      for (int j=0;j<_xyz->nnodePerCell;++j) {
	j1 = _part->iconnectivityLoc[_xyz->nnodePerCell*i+j];
	fp.write(reinterpret_cast<const char *>(&j1), sizeof(int));
      }
    }
    fp.write(reinterpret_cast<const char *>(&Cells), 4);
    cell_offsets = 0;
    for (int i=0;i<nC;i++) {
      cell_offsets += _xyz->nnodePerCell;
      fp.write(reinterpret_cast<const char *>(&cell_offsets), sizeof(int));
    }
    fp.write(reinterpret_cast<const char *>(&CellChars), 4);    
    for (int i=0;i<nC;i++) fp.write(reinterpret_cast<const char *>(&cell_type), sizeof (unsigned char));
    fp.write(reinterpret_cast<const char *>(&Cells), 4);
    for (int i=0;i<nC;i++) fp.write(reinterpret_cast<const char *>(&vState[i]), sizeof (int));
    fp.write(reinterpret_cast<const char *>(&Cells), 4);
    for (int i=0;i<nC;i++) fp.write(reinterpret_cast<const char *>(&gID[i]), sizeof (int));
    fp.write(reinterpret_cast<const char *>(&CellsTH), 4);
    for (int i=0;i<4*nC;i++) fp.write(reinterpret_cast<const char *>(&cThetaOut[i]), sizeof (float));
    fp.write(reinterpret_cast<const char *>(&CellsTemp), 4);
    for (int i=0;i<nC;i++) fp.write(reinterpret_cast<const char *>(&TempOut[i]), sizeof (float));
    fp.close();
  } // for (int rank ...)
  MPI_Barrier(MPI_COMM_WORLD);
  if (_part->myid == 0) {
    fp.open(vtkFilename.c_str(), std::fstream::app);
    fp << "  </AppendedData>" << std::endl;
    fp << "</VTKFile>" << std::endl;
    fp.close();
  }
  MPI_Barrier(MPI_COMM_WORLD);  
} // end WriteToVTU1

void VoxelsCA::WriteCSVData(const std::string &filename)
{
  // write out csv file with grain id, axis-angle, vstate
  int j3,j2,j1;
  double x,y,z;
  std::ofstream fp;
  fp.open(filename.c_str());
  fp << "grain nucleation (x,y,z), axis-angle (omega,n), grain Volume" << std::endl;
  for (int j=0;j<nGrain;++j){
    j3 = floor(gNucleus[j]/(_xyz->nX[0]*_xyz->nX[1]));
    j2 = floor( (gNucleus[j]-_xyz->nX[0]*_xyz->nX[1]*j3)  /_xyz->nX[0]);
    j1 = gNucleus[j] - _xyz->nX[0]*_xyz->nX[1]*j3 - _xyz->nX[0]*j2;
    x = (double(j1)+.5)*(_xyz->dX[0]);
    y = (double(j2)+.5)*(_xyz->dX[1]);
    z = (double(j3)+.5)*(_xyz->dX[2]);
    
    fp << x <<"," << y << "," << z << "," << cTheta[4*j] << "," <<
      cTheta[4*j+1] << "," << cTheta[4*j+2] << "," << cTheta[4*j+3] << std::endl;

  } // end for (int j...

  fp.close();

} // WriteCSVData

void VoxelsCA::WriteToPVD(const std::string &filename, const std::vector<int> & filinds,
			  const std::vector<double> & filtime)
{
  std::string vtkFilename = filename + ".pvd";
  std::ofstream fp;
  std::string filvtu;
  if (_part->myid == 0) {
    fp.open(vtkFilename.c_str());
    fp << "<?xml version=\"1.0\"?>" << std::endl;
    fp << "<VTKFile type=\"Collection\" version=\"0.1\"" << std::endl;
    fp << "      byte_order=\"LittleEndian\"" << std::endl;
    fp << "      compressor=\"vtkZLibDataCompressor\">" << std::endl;
    fp << "  <Collection>" << std::endl;
    for (int j=0;j<filinds.size();++j){
      filvtu = filename+std::to_string(filinds[j])+".vtu";
      fp << "<DataSet timestep=\" "<< filtime[j] <<"\" group=\"\" part=\"0\"" << std::endl;
      fp << "   file=\"" << filvtu <<"\"/>" << std::endl;
    } // for (int j ...
    fp << "  </Collection>" << std::endl;
    fp <<"</VTKFile>" << std::endl;
  } // if (_part->myid
} // WriteToPVD
